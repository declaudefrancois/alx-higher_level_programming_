Tests case for the function def matrix_mul(m_a, m_b):
==============================================

Should give the correct output, given correct args
--------------------------------------------------
>>> fn = __import__('100-matrix_mul').matrix_mul

>>> fn ([[1, 2], [3, 4]], [[1, 2], [3, 4]])
[[7, 10], [15, 22]]

>>> fn ([[1, 2]], [[3, 4], [5, 6]])
[[13, 16]]

>>> fn ([[1, 2, 8], [7, 2, 5.6], [1, 1, 1]], [[3, 4, 4], [5, 6, 4], [7, 8, 9]])
[[69, 80, 84], [70.19999999999999, 84.8, 86.4], [15, 18, 17]]


Should raise exception if m_a or m_b is empty
----------------------------------------------
>>> m_a = []
>>> m_b = [[1]]
>>> fn (m_a, m_b)
Traceback (most recent call last):
TypeError: m_a can't be empty

>>> fn (m_b, m_a)
Traceback (most recent call last):
TypeError: m_b can't be empty

>>> m_a = [[]]
>>> fn (m_a, m_b)
Traceback (most recent call last):
TypeError: m_a can't be empty

>>> fn (m_b, m_a)
Traceback (most recent call last):
TypeError: m_b can't be empty


Should raise error if m_a or m_b is not a list 
of list of int or float
------------------------------------------------------
>>> m_a = [1]
>>> fn (m_a, m_b)
Traceback (most recent call last):
TypeError: m_a must be a list of lists

>>> fn (m_b, m_a)
Traceback (most recent call last):
TypeError: m_b must be a list of lists

>>> m_a = [[1, 3], [2, 2]]
>>> m_b = (1,)
>>> fn (m_a, m_b)
Traceback (most recent call last):
TypeError: m_b must be a list

>>> fn (m_b, m_a)
Traceback (most recent call last):
TypeError: m_a must be a list

>>> m_a = [[1, "a"], [[1]]]
>>> fn (m_a, m_b)
Traceback (most recent call last):
TypeError: m_a should contain only integers or floats

>>> m_b = [[1, 2], [1, 3]]
>>> fn (m_b, m_a)
Traceback (most recent call last):
TypeError: m_b should contain only integers or floats


Should raise error if each row of m_a or m_b
are not of the same size
--------------------------------------------

>>> m_a = [[1, 2], [1, 2, 3], [1]]
>>> m_b = [[1, 2], [1, 2]]
>>> fn (m_a, m_b)
Traceback (most recent call last):
TypeError: each row of m_a must be of the same size

>>> fn (m_b, m_a)
Traceback (most recent call last):
TypeError: each row of m_b must be of the same size


Should raise exception if the number of columns in the
first matrix is not equal to the number of rows in the second matrix
--------------------------------------------------------------------

>>> m_a = [[1,2], [3, 4]]
>>> m_b = [[1, 3, 4]]
>>> fn (m_a, m_b)
Traceback (most recent call last):
ValueError: m_a and m_b can't be multiplied

Should raise exception if arg not given
--------------------------------------

>>> fn ([])
Traceback (most recent call last):
TypeError: matrix_mul() missing 1 required positional argument: 'm_b'
